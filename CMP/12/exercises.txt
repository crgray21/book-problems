(1) int a[] = {5, 15, 34, 54, 14, 2, 52, 72};
    int *p = &a[1], *q = &a[5];

    (a) What is the value of *(p + 3)? => a[1 + 3] = a[4] = 14
    (b) What is the value of *(q - 3)? => a[5 - 3] = a[2] = 34
    (c) What is the value of q - p?    => 4

    (d) Is the condition 'p < q' true or false?   => true
    (e) Is the condition '*p < *q' true or false? => false


(2) Suppose that high, low, and middle are all pointer variables of the same type, and that
    low and high point to elements of an array. Why is the following statement illegal, and
    how could it be fixed?

    middle = (low + high) / 2;

    Since low and high are both pointers, adding them directly isn't allowed, but subtracting is! Also, directly using 
    low + high is subject to overflow! So instead we should use:

    middle = low + (high - low) / 2;

    By subtracting the 2 pointers first, we get back an integer of the range between the 2 pointers, which can then be 
    divided by 2 to find the midpoint, and then added to low so that it now points at the midpoint between high and low.


(3) What will be the contents of the a array after the following statements are executed?

    #define N 10

    int a[N] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = &a[0], *q = &a[N-1], temp;

    while (p < q) {
        temp = *p;
        *p++ = *q;
        *q-- = temp;
    }

    Remember that the * operator has precedence over the increment and decrement operators. *p points at the beginning
    of the array and *q point at the end of the array at the beginning of the loops. By the time p and q cross on another,
    they have swapped the elements in their respective halves of the array, resulting in the array being reversed.


(4) #include <stdio.h>
    
    #define STACK_SIZE 100

    // external vars
    int contents[STACK_SIZE];
    int *top_ptr = contents;

    
    void make_empty(void) {
        top_ptr = contents;
    }

    bool is_empty(void) {
        return top_ptr == contents;
    }

    bool is_full(void) {
        return top_ptr == contents + STACK_SIZE
    }

    void push(int i) {
        if (is_full())
            stack_overflow();
        else
            *top_ptr++ = i;
    }

    int pop(void) {
        if (is_empty())
            stack_underflow();
        else
            return *(--top_ptr); 
    }


(5) Suppose that a is a one-dimensional array and p is a pointer variable. Assuming that the assignment p = a has
    just been performed, which of the following expressions are illegal because mismatched types? Of the remaining
    expressions, which are true (have a nonzero value)?

    (a) p == a[0]    --> mismatched type, thus ILLEGAL
    (b) p == &a[0]   --> true
    (c) *p == a[0]   --> true
    (d) p[0] == a[0] --> true


(6) Rewrite the following function to use pointer arithmetic instead of array subscripting. (In other words, eliminate
    the variable i and all uses of the [] operator.) Make as few changes as possible.

    int sum_array(const int a[], int n) {
        int i, sum;

        sum = 0;
        for (i = 0; i < n; i++) {
            sum += a[i];
        }
        return sum;
    }

    int new_sum_array(const int *a, int n) {
        int sum = 0;

        for (int *p = a; p < a + n; p++) {
            sum += *p;
        }
        return sum;
    }


(7) bool search(const int a[], int n, int key) {
        int *p;

        for (p = a, p < a + n, p++) {
            if (*p == key)
                return true;
        }
        return false;


(8) void store_zeros(int *a, int n) {
        int *p;

        for (p = a; p < a + n; p++) {
            *p = 0;
        }
    }


(9) double inner_product(const double *a, const double *b, int n) {
        int total = 0;

        for (int i = 0; i < n; i++) {
            total += *(a + i) * *(b + i);
        }
        return total;
    }


(10) Modify the find_middle function of section 11.5 so that it uses pointer arithmetic to calculate the return value.

     int* find_middle(int a[], int n) {
        return a+(n/2);
     }


(11) Modify the find_largest function so that it uses pointer arithmetic to calculate the return.

     int find_largest(int a[], int n) {
        int max, *p;
        max = *a;
        
        for (p = a + 1; p < a + n; p++) {
            if (*p > max)
                max = *p;
        }

        return max;
     }

        
(12) Write the following function:
    
     void find_two_largest(const int *a, int n, int *largest, int *second_largest) {
        int *p;

        for (p = a; p < a + n; p++) {
            if (*p > *largest) 
                *second_largest = *largest;
                *largest = *p;
            else if (*p > *second_largest)
                *second_largest = *p;
     }


(13)  SKIP


(14) Assume that the following array contains a week's worth of hourly temperature readings, with each row containing the readings
     for one day:
     
     int temperatures[7][24];

     Write a statement that uses the search function (from exercise 7) to search the entire temperatures array for the value 32.

     for (p = temperatures; p < temperatures + 7; p++ ) {
         search(*p, 24, 32);
     }


(15) Write a loop that prints all temperature readings stored in row i of the temperatures array. Use a pointer to visit each
     element of the array.

     for (p = temperatures[i]; p < temperatures[i] + 24; p++) {
         printf("%d ", *p);
     }

     for (p = *(temperatures + i); p < *(temperatures + i) + 24; p++) {
         printf("%d ", *p);
     }


(16) Write a loop that prints the highest temperature in the temperatures array (see exercise 14) for each day of the week. The
     loop body should call the find_largest function, passing it one row of the array at a time.

     for (p = temperatures; p < temperatures + 7; p++) {
         printf("%d ", find_largest(*p, 24));
     }

     for (p = &temperatures[0]; p < &temperatures[0] + 7; p++) {
         printf("%d ", find_largest(*p, 24));
     }

     for (p = &temperatures[0]; p < &temperatures[7]; p++) {
         printf("%d ", find_largest(*p, 24));
     }


(17) int sum_two_dimensional_array(const int a[][LEN], int n) {
        int sum, *p;

        for (p = *a, p < *a + n * LEN; p++) {
            sum += *p;
        }

        return sum;
     }


     int sum_two_dimensional_array(const int a[][LEN], int n) {
        int sum, *p;

        for (p = &a[0][0], p <= &a[n-1][LEN-1]; p++) {
            sum += *p;
        }

        return sum;
     }


     int sum_two_dimensional_array(const int a[][LEN], int n) {
        int sum, *p;

        for (p = *(a + 0), p < *(a + n) + LEN; p++) {
            sum += *p;
        }

        return sum;
     }


(18) SKIP
