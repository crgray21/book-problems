(1) void *my_malloc(sizet size) {
        void *p;

        if ((p = malloc(size)) == NULL) {
            fprintf(stderr, "memory allocation failed; exiting program!\n");
            exit(EXIT_FAILURE);
        }
        
        return p;
    }


(2) char *duplicate(char *s) {
        char *c;

        c = malloc(strlen(s) + 1);

        if (!c)
            return c;

        strcpy(c, s);
        return c;
    }


(3) int *create_array(int n, int initial_value) {
        int *p;

        if ((p = (int*) malloc(sizeof(int) * n) == NULL)
            return p;

        for (int i = 0; i < n; ++i) {
            *(p + i) = initial_value; 
        }

        return p;
    }


(4) Suppose the following declarations are in effect:
    
    struct point { int x, y; };
    struct rectangle { struct point upper_left, lower_right; };
    struct rectangle *p;

    p = (struct rectangle*) malloc(sizeof(struct rectangle));
    p->upper_left  = { 10, 25 };
    p->lower_right = { 20, 15 };


(5) (a) p->b = ' ';     ==> NOT legal
    (b) p->e[3] = 10;   ==> legal
    (c) (*p).d.a = '*'; ==> legal
    (d) p->d->c = 20;   ==> NOT legal


(6) struct node *delete_from_list(struct node *list, int key) {
        struct node* cur = list;
        struct node* tmp;

        if (!cur)
            return cur;

        if (cur->data == key) {
            cur = cur->next;
            free(list);
            return cur;
        }

        while (cur->next && cur->next->data != key) {
            cur = cur->next;
        }

        if (cur->next->data == key) {
            tmp = cur->next;
            cur->next = cur->next->next;
            free(tmp);
        }

        return list;
    }


(7) The problem with the provided loop is that you cannot reference p->next after you free p in the loop body.
    To fix this, you should copy the pointer stored in p to a temporary variable, assign p->next to p, and then free
    the node from memory using the pointer stord in the temporary variable.


(8) SKIP


(9) True


(10) void print_part(struct part *p) {
        printf("Part number: %d\n", p->number);
        printf("Part name: %s\n", p->name);
        printf("Quantity on hand: %d\n", p->on_hand);
     }


(11) int count_occurrences(struct node *list, int n) {
        int cnt;   

        while (list) {
            if (list->val == n) 
                cnt++;
            list = list->next;
        }

        return cnt;
     }


(12) struct node *find_last(struct node *list, int n) {
        struct node *last = NULL;

        while (list) {
            if (list->val == n)
                last = list;
            list = list->val;
        }

        return last;
     } 


(13) (1) If the node needs to be inserted at the head of the list, the logic will not work because prev is still NULL.
         You can either handle this as an edge case up front by checking if the new node's value is less than the head
         node's value. If true, you'll need to edit the head node to the new node that is being inserted at the front
         of the linked list and return it. The function call that occurs outside the function will also need to be assigned
         to the head node pointer that exists outside the function unless we edit the function to use a double pointer for
         for the head so that we can change the head pointer within the function.

         Personally, I would also check if cur is ever equal to null as part of the while loop. I think this makes the code more clear
         and also handles any weird edge cases with different implementation defined NULL pointer values.


(14) void delete_from_list(struct node **head, int key) {
        struct node* tmp;

        if (*head->val == key) {
            tmp = *head;
            *head = *head->next;
            free(tmp);
            return;
        }

        while (*head->next && *head->next != key) {
            *head = *head->next;
        }

        if (*head->next == key) {
            tmp = *head->next;
            *head->next = *head->next->next;
            free(tmp);
        }
     }


(15) Prints 0


(16) int sum(int (*f)(int), int start, int end) {
        int total = 0;
     
        for (; start <= end; start++) {
            total += (*f)(start);
        }

        return total;
     }


(17) qsort(a + 50, 50, sizeof(int), compare_ints);


(18) int compare_parts(const void *p, const void *q) {
        const struct part *p1 = p; 
        const struct part *q1 = q; 

        if (p1->number < q1->number)
            return 1;
        else if (p1->number == q1->number)
            return 0;
        else
            return -1;
     }


(19) void query_command(char *s) {
        int len = sizeof(file_cmd) / sizeof(file_cmd[0]);
        
        for (int i = 0; i < len; ++i) {
            if (strcmp(s, file_cmd[i].cmd_name) == 0) {
               file_cmd[i].cmd_pointer(); 
               break;
            }
        } 
     }
