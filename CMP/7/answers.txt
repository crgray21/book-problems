(1) Give the decimal value of each of the following integer constants:
(a) 077   = 0 + 56 + 7 = 63
(b) 0x77  = 112 + 7 = 119
(c) 0xABC = 2560 + 176 + 12 = 2748 


(2) Which of the following are not legal constants in C? Classify each legal constant as either int or FP.
(a) 010E2    --> Not a legal constant; 
(b) 32.1E+5  --> Legal floating point; optional sign of (+) or (-) is allowed after the exponenent (e|E)
(c) 0790     --> Legal integer; octal base
(d) 100_000  --> Not a legal constant; no underscores allowed in any constants
(e) 3.978e-2 --> Legal floating point;


(3) Which of the following are not legal types in C?
(a) short unsigned int --> legal
(b) short float   --> not legal
(c) long double   --> legal
(d) unsigned long --> legal


(4) If 'c' is a variable of type char, which one of the following statements is illegal?
(a) i += c; /* i has type int */ totally legal
(b) c = 2 * c - 1; assignment of type char could result in some data loss and inaccurate results, but it is legal
(c) putchar(c); legal
(d) printf(c); not legal, no specifier for printf() fn call.


(5) Which one of the following is not a legal way to write the number 65 (assume character set is ASCII).
(a) 'A'       --> legal; legal char constant (single char constants have type int)
(b) 0b1000001 --> legal; binary constant
(c) 0101      --> legal; octal constant
(d) 0x41      --> legal; hexa constant


(6) For each of the following items of data, specify which one of the types char, short, int, or long
    is the smallest one guaranteed to be large enough to store the item.
(a) Days in a month  --> char
(b) Days in a year   --> short
(c) Minutes in a day --> short
(d) Seconds in a day --> int


(7) For each of the following character escapes, give the equal octal escape (assume ASCII). 
(a) \b --> \010
(b) \n --> \012
(c) \r --> \015
(d) \t --> \011


(8) Repeat exercise 7, but give the equivalent hexadecimal escape.
(a) \b --> 0x08
(b) \n --> 0x0a
(c) \r --> 0x0d
(d) \t --> 0x09


(9) Suppose that i and j are variables of type int. What is the type of the expression i / j + 'a'?

    (a) The type of the above expression is int. Single character constants are of type int.


(10) Suppose that i is a variable of type int and j is a variable of type long and k is a variable of type 
     unsigned int. What is the type of the expression i + (int) j * k?

     (a) The type of the expression is unsigned int.


(11) Suppose that i is a variable of type int, f is a variable of type float, and d is a variable of type
     double. What is the type of the expression i * f / d?
    
     (a) The type of the expression is double.


(12) Suppose that i is a variable of type int, f is a variable of type float, and d is a variable of type
     double. Explain what conversions take place during execution of the following statement:
     
     d = i + f;

     (a) First evaluate the expression on the RHS of the assignment operator. It is an int + a float, so we
         end up casting the lower rank type (int) to the higher rank type (float). The type of the result is
         thus float. However, since the float on the RHS is being assigned to a double, the type is implicitly
         cast to a double and stored in the variable d.


(13) Assume that a program contains the following declarations:
     char c = '\1';
     short s  = 2;
     int i    = -3;
     long m   = 5;
     float f  = 6.5f;
     double d = 7.5;

     Give the value and the type of each expression listed below:

     (a) c * i   --> 1 * -3  = -3; type = int
     (b) s + m   --> 2 +  5  =  7; type = long
     (c) f / c   --> 6.5f / 1.0f =  6.5f; type = float  
     (d) d / s   --> 7.5 / 2.0   =  3.75; type = double
     (e) f - d   --> 6.5 - 7.5 = -1.0; type = double
     (f) (int) f --> 6; type = int


(14) Does the following statement always compute the fractional part of f correctly (assuming that f and frac_part
     are float variables)? If not, what's the problem?

     frac_part = f - (int) f;

     (a) No. When f is negative, this function will not compute the fractional part correctly. Also, the non-fractional
         portion of the float must always be able to fit into int.
    

(15) Use typedef to create types named Int8, Int16, and Int32. Define the types so that they represent 8-bit,
     16-bit, and 32-bit integers on your machine.

     typedef signed char Int8;
     typedef short Int16;
     typedef int Int32;


