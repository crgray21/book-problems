(1) Write the parameterized macros that compute the following values:
    (a) The cube of x.
    (b) The remainder when n is divided by 4.
    (c) 1 if the product of x and y is less than 100, 0 otherwise.

    (a) #define CUBE(x) ((x)*(x)*(x)) 
    (b) #define REMAINDER_FOUR(n) ((n) % 4)
    (c) #define PRODUCT_LT_100(x,y) ((x) * (y) < 100)


(2) #define NUM_ELEMS(x)  sizeof(x) / sizeof(x[0])


(3) Let DOUBLE be the following macro:
    
    #define DOUBLE(x) 2*x

    (a) What is the value of DOUBLE(1+2)? ==> 2*1+2 = 4
    (b) What is the value of 4/DOUBLE(2)? ==> 4/2*2 = 4
    (c) Fix the definition of DOUBLE. ==> #define DOUBLE(x) (2 * (x))


(4) For each of the following macros, give an example that illustrates a problem with the macro and show how to fix it.

    (a) #define AVG(x, y)   (x-y)/2
    (b) #define AREA(x, y)  (x) * (y)

    (a) AVG(14, 52 ^ 32) ==> 14 - 52 ^ 32 ==> Wrong outcome
    (a) #define AVG(x, y)   (x+y)/2 

    (b) 20 / AREA(10, 5); ==> 20 / (10) * (5) ==> 10 ==> Wrong outcome
    (b) #define AREA(x, y)  ((x) * (y))


(5) Let TOUPPER be the following macro:
    
    #define TOUPPER(c) ('a' <= (c) && (c) <= 'z'? (c) - 'a' + 'A': (c))

    Let s be a string and let i be an int variable. Show the output produced by each of the following program fragments.

    (a) strcpy(s, "abcd");
        i = 0;
        putchar(TOUPPER(s[++i]));

    (b) strcpy(s, "0123");
        i = 0;
        putchar(TOUPPER(s[++i]));

    (a) ('a' <= s[++i] && s[++i] <= 'z'? s[++i] - 'a' + 'A' : s[++i]) ==> 'D'
    (b) ('a' <= s[++i] && s[++i] <= 'z'? s[++i] - 'a' + 'A' : s[++i]) ==> '3'


(6) (a) Write a macro DISP(f, x) that expands into a call of printf that displays the value of the function when called with argument x.

        DISP(f, x)    printf("f(%g) = %g\n", x, f(x)) 

        (b) Write a macro DISP2(f, x, y) that's similar to DISP but works for functions with two arguments.

        DISP2(f, x, y)    printf("f(%g, %g) = %g\n", x, y, f(x, y))


(7) Let GENERIC_MAX be the following macro:

    #define GENERIC_MAX(type)          \
    type type##_max(type x, type y) {  \
        return x > y ? x : y;          \
    }

    (a) Show the preprocessor's expansion of GENERIC_MAX(long).

        long long_max(long x, long y) {
            return x > y ? x : y;
        }

    (b) Explain why GENERIC_MAX doesn't work for basic types such as unsigned long.
        --> unsigned long has a space in it, meaning it won't work when expanding the type for the function name.

    (c) Describe a technique that would allow us to use GENERIC_MAX with basic types such as unsigned long.
        --> We could use typedef to make a new type wit no spaces for types similar to unsigned long.


(8) Suppose we want a macro that expands into a string containing the current line number and file name. In other words,
    we would like to write:

    const char *str = LINE_FILE;

    and have it expand into

    const char *str = "Line 10 of file foo.c";

    where foo.c is the file containing the program and 10 is the line on which the invocation of LINE_FILE appears.

    #define LINE_FILE "Line" #__LINE__ "of file" #__FILE__


(9) Write the following parameterized macros:
    
    (a) CHECK(x, y, n) - Has the value 1 if both x and y fall between 0 and n - 1, inclusive.
    (b) MEDIAN(x, y, z) - Finds the median of x, y, and z.
    (c) POLYNOMIAL(x) - Computes the polynomial 3x^5 + 2x^4 - 5x^3 - x^2 + 7x - 6.

    (a) #define CHECK(x, y, n)     ((x) >= 0 && (x) < (n) && (y) >= 0 && (y) < (n))
    (b) #define MEDIAN(x, y, z)    if (x > y) 
                                       if (x < z)
                                           x
                                       else
                                           z
                                   else if (y < z)
                                       y
                                   else 
                                       z
    
    (c) #define POLYNOMIAL(x)     (3*(x)*(x)*(x)*(x)*(x) + 2*(x)*(x)*(x)*(x) - 5*(x)*(x)*(x) - (x)*(x) + 7*(x) - 6)
    

(10) What characteristics of a function would make it unsuitable as a macro?

     Due to the dangers of macros expanding variables and possible side effects, I would not use macros
     to replace a function that does anything complex or that utilizes any sort of macro chaining or macros
     within macros. 

     When macros are nested or chained, the resulting code can become lengthy, resulting in a larger amount of compiled code.

     I would also not use macros for a function that wants to access variables outside of its own scope.

     Also if you want to use a pointer to the function. It is not possible to have a pointer to a macro.


(11) C programmers often use the fprintf() function to write error messages:

     fprintf(stderr, "Range error: index = %d\n", index);

     stderr is C's "standard error" stream; the remaining arguments are the same as those for printf(), starting
     with the format string. Write a macro named ERROR that generates the call of fprintf() shown above when given
     a format string and the items to be displayed:

     ERROR("Range error: index = %d\n", index);

    #define ERROR(str, idx)    fprintf(stderr, str, idx)


(12) Suppose that macro M has been defined as follows:
     
     #define M 10

     Which of the following tests will fail?

     (a) #if M --> PASS
     (b) #ifdef M --> PASS
     (c) #ifndef M --> FAIL
     (d) #if defined(M) --> PASS
     (e) #if !defined(M) --> FAIL


(13) Show what the following program will look like after processing. You may ignore any lines added to the program as
     a result of including the <stdio.h> header.

     void f(void);

     int main(void) {
         f();
         return 0;
     }

     void f(void) {
         printf("N is undefined\n");
     }
     

(14) Show what the following program will look like after preprocessing. Some lines of the program may cause compilation errors;
     find all such errors.

     #define N = 10
     #define INC(x) x+1
     #define SUB (x,y) x-y          // will cause issues because of the space between SUB and the parentheses used for the parameters; must have no space in between for parameterized macros
     #define SQR(x) ((x)*(x))       
     #define CUBE(x) (SQR(x)*(x))
     #define M1(x,y) x##y
     #define M2(x,y) #x #y

     int main(void) {
         int a[= 10], i, j, k, m;           // won't compile due to the array index
        
         i = j;

         i = 10 * j+1;                      // possibly problematic due to order of operations
         i = (x,y) x-y(j, k);               // will not compile... 
         i = (((j)*(j)))*(((j)*(j)));       // no issues here
         i = ((j)*(j))*(j);                 // no issues here
         i = jk;                            // no variable with identifier jk; will not compile...
         puts("i" "j");                     // valid code; will become puts("ij");

     #undef SQR
         i = SQR(j);                        // this stays as is because SQR was undefined in the previous line; will not compile...
     #define SQR                            // this is allowed b/c we undefined SQR 2 lines before; cannot define a macro again unless it's the exact same
         i = SQR(j);                        // because we re-defined the SQR macro after undefining it, it will take on the new definition when it is re-defined
         i = (j);                           // the previous line becomes this line because SQR has no replacement list, thus removing the SQR macro text

         return 0;
     }
     

(15) Suppose that a program needs to display messages in either English, French, or Spanish. Using conditional compilation, write a program fragment that
     displays one of the following three messages, depending on whether or not the specified macro is defined.

     Insert Disk 1          (if ENGLISH is defined)
     Inserez Le Disque 1    (if FRENCH is defined)
     Inserte El Disco 1     (if SPANISH is defined)

     #if defined(ENGLISH)
     printf("Insert Disk 1\n");
     #elif defined(FRENCH)
     printf("Inserez Le Disque 1\n");
     #elif defined(SPANISH)
     printf("Inserte El Disco 1\n");
     #endif


(16) Assume that the following macro definitions are in effect:

     #define IDENT(x) PRAGMA(ident #x)
     #define PRAGMA(x) _Pragma(#x)

     What will the followling line look like after macro expansion?

     IDENT(foo)

     After macro expansion:

     #pragma ident "foo"


